{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": false,
    "properties": {
        "annotate.annotation_filters": {
            "default": [
                "choose_more_annotated",
                "choose_transcripts_by_priority"
            ],
            "description": "A comma separated list of filters to apply to putative annotations",
            "items": {
                "enum": [
                    "choose_more_annotated",
                    "choose_transcripts_by_priority"
                ],
                "type": "string"
            },
            "type": "array"
        },
        "annotate.draw_fusions_only": {
            "default": true,
            "description": "Flag to indicate if events which do not produce a fusion transcript should produce illustrations",
            "type": "boolean"
        },
        "annotate.draw_non_synonymous_cdna_only": {
            "default": true,
            "description": "Flag to indicate if events which are synonymous at the cdna level should produce illustrations",
            "type": "boolean"
        },
        "annotate.max_orf_cap": {
            "default": 3,
            "description": "The maximum number of orfs to return (best putative orfs will be retained)",
            "type": "integer"
        },
        "annotate.min_domain_mapping_match": {
            "default": 0.9,
            "description": "A number between 0 and 1 representing the minimum percent match a domain must map to the fusion transcript to be displayed",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "annotate.min_orf_size": {
            "default": 300,
            "description": "The minimum length (in base pairs) to retain a putative open reading frame (orf)",
            "type": "integer"
        },
        "bam_stats.distribution_fraction": {
            "default": 0.97,
            "description": "the proportion of the distribution to use in computing stdev",
            "maximum": 1,
            "minimum": 0.01,
            "type": "number"
        },
        "bam_stats.sample_bin_size": {
            "default": 1000,
            "description": "how large to make the sample bin (in bp)",
            "type": "integer"
        },
        "bam_stats.sample_cap": {
            "default": 1000,
            "description": "maximum number of reads to collect for any given sample region",
            "type": "integer"
        },
        "bam_stats.sample_size": {
            "default": 500,
            "description": "the number of genes/bins to compute stats over",
            "type": "integer"
        },
        "cluster.cluster_initial_size_limit": {
            "default": 25,
            "description": "The maximum cumulative size of both breakpoints for breakpoint pairs to be used in the initial clustering phase (combining based on overlap)",
            "type": "integer"
        },
        "cluster.cluster_radius": {
            "default": 100,
            "description": "Maximum distance allowed between paired breakpoint pairs",
            "type": "integer"
        },
        "cluster.limit_to_chr": {
            "default": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20",
                "21",
                "22",
                "X",
                "Y"
            ],
            "description": "A list of chromosome names to use. breakpointpairs on other chromosomes will be filteredout. for example '1 2 3 4' would filter out events/breakpoint pairs on any chromosomes but 1, 2, 3, and 4",
            "items": {
                "type": "string"
            },
            "type": [
                "array",
                "null"
            ]
        },
        "cluster.max_files": {
            "default": 200,
            "description": "The maximum number of files to output from clustering/splitting",
            "minimum": 1,
            "type": "integer"
        },
        "cluster.max_proximity": {
            "default": 5000,
            "description": "The maximum distance away from an annotation before the region in considered to be uninformative",
            "type": "integer"
        },
        "cluster.min_clusters_per_file": {
            "default": 50,
            "description": "The minimum number of breakpoint pairs to output to a file",
            "minimum": 1,
            "type": "integer"
        },
        "cluster.split_only": {
            "default": false,
            "description": "just split the input files, do not merge input breakpoints into clusters",
            "type": "boolean"
        },
        "cluster.uninformative_filter": {
            "default": false,
            "description": "Flag that determines if breakpoint pairs which are not within max_proximity to any annotations are filtered out prior to clustering",
            "type": "boolean"
        },
        "convert": {
            "additionalProperties": {
                "properties": {
                    "assume_no_untemplated": {
                        "default": false,
                        "description": "Assume the lack of untemplated information means that there IS not untemplated sequence expected at the breakpoints",
                        "type": "boolean"
                    },
                    "file_type": {
                        "description": "the tool the file is input from or 'mavis' for standard mavis-style tab files",
                        "enum": [
                            "manta",
                            "delly",
                            "transabyss",
                            "pindel",
                            "chimerascan",
                            "mavis",
                            "defuse",
                            "breakdancer",
                            "vcf",
                            "breakseq",
                            "cnvnator",
                            "strelka",
                            "starfusion"
                        ],
                        "type": "string"
                    },
                    "inputs": {
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "description": "List of input files"
                    },
                    "strand_specific": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "required": [
                    "inputs",
                    "file_type"
                ],
                "type": "object"
            },
            "type": "object"
        },
        "illustrate.domain_color": {
            "default": "#ccccb3",
            "description": "Domain fill color",
            "type": "string",
            "pattern": "^#[a-zA-Z0-9]{6}"
        },
        "illustrate.domain_mismatch_color": {
            "default": "#b2182b",
            "description": "Domain fill color on 0%% match",
            "type": "string",
            "pattern": "^#[a-zA-Z0-9]{6}"
        },
        "illustrate.domain_name_regex_filter": {
            "default": "^PF\\d+$",
            "description": "The regular expression used to select domains to be displayed (filtered by name)",
            "type": "string"
        },
        "illustrate.domain_scaffold_color": {
            "default": "#000000",
            "description": "The color of the domain scaffold",
            "type": "string",
            "pattern": "^#[a-zA-Z0-9]{6}"
        },
        "illustrate.drawing_width_iter_increase": {
            "default": 500,
            "description": "The amount (in  pixels) by which to increase the drawing width upon failure to fit",
            "type": "integer"
        },
        "illustrate.exon_min_focus_size": {
            "default": 10,
            "description": "Minimum size of an exon for it to be granted a label or min exon width",
            "type": "integer"
        },
        "illustrate.gene1_color": {
            "default": "#657e91",
            "description": "The color of genes near the first gene",
            "pattern": "^#[a-zA-Z0-9]{6}",
            "type": "string"
        },
        "illustrate.gene1_color_selected": {
            "default": "#518dc5",
            "description": "The color of the first gene",
            "pattern": "^#[a-zA-Z0-9]{6}",
            "type": "string"
        },
        "illustrate.gene2_color": {
            "default": "#325556",
            "description": "The color of genes near the second gene",
            "pattern": "^#[a-zA-Z0-9]{6}",
            "type": "string"
        },
        "illustrate.gene2_color_selected": {
            "default": "#4c9677",
            "description": "The color of the second gene",
            "pattern": "^#[a-zA-Z0-9]{6}",
            "type": "string"
        },
        "illustrate.label_color": {
            "default": "#000000",
            "description": "The label color",
            "pattern": "^#[a-zA-Z0-9]{6}",
            "type": "string"
        },
        "illustrate.mask_fill": {
            "default": "#ffffff",
            "description": "Color of mask (for deleted region etc.)",
            "pattern": "^#[a-zA-Z0-9]{6}",
            "type": "string"
        },
        "illustrate.mask_opacity": {
            "default": 0.7,
            "description": "Opacity of the mask layer",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "illustrate.max_drawing_retries": {
            "default": 5,
            "description": "The maximum number of retries for attempting a drawing. each iteration the width is extended. if it is still insufficient after this number a gene-level only drawing will be output",
            "type": "integer"
        },
        "illustrate.novel_exon_color": {
            "default": "#5D3F6A",
            "description": "Novel exon fill color",
            "pattern": "^#[a-zA-Z0-9]{6}",
            "type": "string"
        },
        "illustrate.scaffold_color": {
            "default": "#000000",
            "description": "The color used for the gene/transcripts scaffolds",
            "pattern": "^#[a-zA-Z0-9]{6}",
            "type": "string"
        },
        "illustrate.splice_color": {
            "default": "#000000",
            "description": "Splicing lines color",
            "pattern": "^#[a-zA-Z0-9]{6}",
            "type": "string"
        },
        "illustrate.width": {
            "default": 1000,
            "description": "The drawing width in pixels",
            "type": "integer"
        },
        "illustrate.breakpoint_color": {
            "default": "#000000",
            "description": "Breakpoint outline color",
            "type": "string",
            "pattern": "^#[a-zA-Z0-9]{6}"
        },
        "libraries": {
            "additionalProperties": {
                "additionalProperties": false,
                "properties": {
                    "assign": {
                        "items": {
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "description": "List of input files or conversion aliases that should be processed for this library"
                    },
                    "total_batches": {
                        "type": "integer",
                        "min": 1,
                        "description": "The number of jobs to slit a library into for cluster/validate/annotate. This will be set during initialization of the config if not given"
                    },
                    "bam_file": {
                        "type": "string",
                        "description": "Path to the bam file containing the sequencing reads for this library"
                    },
                    "disease_status": {
                        "enum": [
                            "diseased",
                            "normal"
                        ],
                        "type": "string"
                    },
                    "median_fragment_size": {
                        "type": "integer",
                        "description": "The median fragment size in the paired-end read library. This will be computed from the bam during initialization of the config if not given"
                    },
                    "protocol": {
                        "enum": [
                            "genome",
                            "transcriptome"
                        ],
                        "type": "string"
                    },
                    "read_length": {
                        "type": "integer",
                        "description": "The read length in the paired-end read library. This will be computed from the bam during initialization of the config if not given"
                    },
                    "stdev_fragment_size": {
                        "type": "integer",
                        "description": "The standard deviation of fragment size in the paired-end read library. This will be computed from the bam during initialization of the config if not given"
                    },
                    "strand_determining_read": {
                        "default": 2,
                        "description": "1 or 2. the read in the pair which determines if (assuming a stranded protocol) the first or second read in the pair matches the strand sequenced",
                        "type": "integer"
                    },
                    "strand_specific": {
                        "default": false,
                        "type": "boolean"
                    }
                },
                "required": [
                    "disease_status",
                    "protocol",
                    "assign"
                ],
                "type": "object"
            },
            "minProperties": 1,
            "type": "object"
        },
        "log": {
            "type": "string"
        },
        "log_level": {
            "default": "INFO",
            "enum": [
                "INFO",
                "DEBUG"
            ],
            "type": "string"
        },
        "output_dir": {
            "type": "string",
            "description": "path to the directory to output the MAVIS files to"
        },
        "pairing.contig_call_distance": {
            "default": 10,
            "description": "The maximum distance allowed between breakpoint pairs (called by contig) in order for them to pair",
            "type": "integer"
        },
        "pairing.flanking_call_distance": {
            "default": 50,
            "description": "The maximum distance allowed between breakpoint pairs (called by flanking pairs) in order for them to pair",
            "type": "integer"
        },
        "pairing.input_call_distance": {
            "default": 20,
            "description": "The maximum distance allowed between breakpoint pairs (called by input tools, not validated) in order for them to pair",
            "type": "integer"
        },
        "pairing.spanning_call_distance": {
            "default": 20,
            "description": "The maximum distance allowed between breakpoint pairs (called by spanning reads) in order for them to pair",
            "type": "integer"
        },
        "pairing.split_call_distance": {
            "default": 20,
            "description": "The maximum distance allowed between breakpoint pairs (called by split reads) in order for them to pair",
            "type": "integer"
        },
        "reference.aligner_reference": {
            "examples": [
                "tests/data/mock_reference_genome.2bit"
            ],
            "items": {
                "type": "string"
            },
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "description": "The reference genome file used by the aligner"
        },
        "reference.annotations": {
            "examples": [
                "tests/data/mock_annotations.json"
            ],
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "type": "array",
            "description": "The reference file containing gene/transcript position information"
        },
        "reference.dgv_annotation": {
            "examples": [
                [
                    "tests/data/mock_dgv_annotation.txt"
                ]
            ],
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "type": "array"
        },
        "reference.masking": {
            "examples": [
                [
                    "tests/data/mock_masking.tab"
                ]
            ],
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "type": "array",
            "description": "A list of regions to ignore in validation. Generally these are centromeres and telomeres or known poor mapping areas"
        },
        "reference.reference_genome": {
            "examples": [
                [
                    "tests/data/mock_reference_genome.fa"
                ]
            ],
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "type": "array"
        },
        "reference.template_metadata": {
            "examples": [
                [
                    "tests/data/cytoBand.txt"
                ]
            ],
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "type": "array"
        },
        "skip_stage.validate": {
            "default": false,
            "description": "skip the validation stage of the MAVIS pipeline",
            "type": "boolean"
        },
        "summary.filter_cdna_synon": {
            "default": true,
            "description": "Filter all annotations synonymous at the cdna level",
            "type": "boolean"
        },
        "summary.filter_min_complexity": {
            "default": 0.2,
            "description": "Filter event calls based on call sequence complexity",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "summary.filter_min_flanking_reads": {
            "default": 10,
            "description": "Minimum number of flanking pairs for a call by flanking pairs",
            "type": "integer"
        },
        "summary.filter_min_linking_split_reads": {
            "default": 1,
            "description": "Minimum number of linking split reads for a call by split reads",
            "type": "integer"
        },
        "summary.filter_min_remapped_reads": {
            "default": 5,
            "description": "Minimum number of remapped reads for a call by contig",
            "type": "integer"
        },
        "summary.filter_min_spanning_reads": {
            "default": 5,
            "description": "Minimum number of spanning reads for a call by spanning reads",
            "type": "integer"
        },
        "summary.filter_min_split_reads": {
            "default": 5,
            "description": "Minimum number of split reads for a call by split reads",
            "type": "integer"
        },
        "summary.filter_protein_synon": {
            "default": false,
            "description": "Filter all annotations synonymous at the protein level",
            "type": "boolean"
        },
        "summary.filter_trans_homopolymers": {
            "default": true,
            "description": "Filter all single bp ins/del/dup events that are in a homopolymer region of at least 3 bps and are not paired to a genomic event",
            "type": "boolean"
        },
        "validate.aligner": {
            "default": "blat",
            "description": "The aligner to use to map the contigs/reads back to the reference e.g blat or bwa",
            "enum": [
                "bwa mem",
                "blat"
            ],
            "type": "string"
        },
        "validate.assembly_kmer_size": {
            "default": 0.74,
            "description": "The percent of the read length to make kmers for assembly",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "validate.assembly_max_paths": {
            "default": 8,
            "description": "The maximum number of paths to resolve. this is used to limit when there is a messy assembly graph to resolve. the assembly will pre-calculate the number of paths (or putative assemblies) and stop if it is greater than the given setting",
            "type": "integer"
        },
        "validate.assembly_min_edge_trim_weight": {
            "default": 3,
            "description": "This is used to simplify the debruijn graph before path finding. edges with less than this frequency will be discarded if they are non-cutting, at a fork, or the end of a path",
            "type": "integer"
        },
        "validate.assembly_min_exact_match_to_remap": {
            "default": 15,
            "description": "The minimum length of exact matches to initiate remapping a read to a contig",
            "type": "integer"
        },
        "validate.assembly_min_remap_coverage": {
            "default": 0.9,
            "description": "Minimum fraction of the contig sequence which the remapped sequences must align over",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "validate.assembly_min_remapped_seq": {
            "default": 3,
            "description": "The minimum input sequences that must remap for an assembled contig to be used",
            "type": "integer"
        },
        "validate.assembly_min_uniq": {
            "default": 0.1,
            "description": "Minimum percent uniq required to keep separate assembled contigs. if contigs are more similar then the lower scoring, then shorter, contig is dropped",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "validate.assembly_strand_concordance": {
            "default": 0.51,
            "description": "When the number of remapped reads from each strand are compared, the ratio must be above this number to decide on the strand",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "validate.blat_limit_top_aln": {
            "default": 10,
            "description": "Number of results to return from blat (ranking based on score)",
            "type": "integer"
        },
        "validate.blat_min_identity": {
            "default": 0.9,
            "description": "The minimum percent identity match required for blat results when aligning contigs",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "validate.call_error": {
            "default": 10,
            "description": "Buffer zone for the evidence window",
            "type": "integer"
        },
        "validate.clean_aligner_files": {
            "default": false,
            "description": "Remove the aligner output files after the validation stage is complete. not required for subsequent steps but can be useful in debugging and deep investigation of events",
            "type": "boolean"
        },
        "validate.contig_aln_max_event_size": {
            "default": 50,
            "description": "Relates to determining breakpoints when pairing contig alignments. for any given read in a putative pair the soft clipping is extended to include any events of greater than this size. the softclipping is added to the side of the alignment as indicated by the breakpoint we are assigning pairs to",
            "type": "integer"
        },
        "validate.contig_aln_merge_inner_anchor": {
            "default": 20,
            "description": "The minimum number of consecutive exact match base pairs to not merge events within a contig alignment",
            "type": "integer"
        },
        "validate.contig_aln_merge_outer_anchor": {
            "default": 15,
            "description": "Minimum consecutively aligned exact matches to anchor an end for merging internal events",
            "type": "integer"
        },
        "validate.contig_aln_min_anchor_size": {
            "default": 50,
            "description": "The minimum number of aligned bases for a contig (m or =) in order to simplify. do not have to be consecutive",
            "type": "integer"
        },
        "validate.contig_aln_min_extend_overlap": {
            "default": 10,
            "description": "Minimum number of bases the query coverage interval must be extended by in order to pair alignments as a single split alignment",
            "type": "integer"
        },
        "validate.contig_aln_min_query_consumption": {
            "default": 0.9,
            "description": "Minimum fraction of the original query sequence that must be used by the read(s) of the alignment",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "validate.contig_aln_min_score": {
            "default": 0.9,
            "description": "Minimum score for a contig to be used as evidence in a call by contig",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "validate.fetch_min_bin_size": {
            "default": 50,
            "description": "The minimum size of any bin for reading from a bam file. increasing this number will result in smaller bins being merged or less bins being created (depending on the fetch method)",
            "type": "integer"
        },
        "validate.fetch_reads_bins": {
            "default": 5,
            "description": "Number of bins to split an evidence window into to ensure more even sampling of high coverage regions",
            "type": "integer"
        },
        "validate.fetch_reads_limit": {
            "default": 3000,
            "description": "Maximum number of reads, cap, to loop over for any given evidence window",
            "type": "integer"
        },
        "validate.filter_secondary_alignments": {
            "default": true,
            "description": "Filter secondary alignments when gathering read evidence",
            "type": "boolean"
        },
        "validate.fuzzy_mismatch_number": {
            "default": 1,
            "description": "The number of events/mismatches allowed to be considered a fuzzy match",
            "type": "integer"
        },
        "validate.max_sc_preceeding_anchor": {
            "default": 6,
            "description": "When remapping a softclipped read this determines the amount of softclipping allowed on the side opposite of where we expect it. for example for a softclipped read on a breakpoint with a left orientation this limits the amount of softclipping that is allowed on the right. if this is set to none then there is no limit on softclipping",
            "type": "integer"
        },
        "validate.min_anchor_exact": {
            "default": 6,
            "description": "Applies to re-aligning softclipped reads to the opposing breakpoint. the minimum number of consecutive exact matches to anchor a read to initiate targeted realignment",
            "type": "integer"
        },
        "validate.min_anchor_fuzzy": {
            "default": 10,
            "description": "Applies to re-aligning softclipped reads to the opposing breakpoint. the minimum length of a fuzzy match to anchor a read to initiate targeted realignment",
            "type": "integer"
        },
        "validate.min_anchor_match": {
            "default": 0.9,
            "description": "Minimum percent match for a read to be kept as evidence",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "validate.min_call_complexity": {
            "default": 0.1,
            "description": "The minimum complexity score for a call sequence. is an average for non-contig calls. filters low complexity contigs before alignment. see [contig_complexity](#contig_complexity)",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
        },
        "validate.min_double_aligned_to_estimate_insertion_size": {
            "default": 2,
            "description": "The minimum number of reads which map soft-clipped to both breakpoints to assume the size of the untemplated sequence between the breakpoints is at most the read length - 2 * min_softclipping",
            "type": "integer"
        },
        "validate.min_flanking_pairs_resolution": {
            "default": 10,
            "description": "The minimum number of flanking reads required to call a breakpoint by flanking evidence",
            "type": "integer"
        },
        "validate.min_linking_split_reads": {
            "default": 2,
            "description": "The minimum number of split reads which aligned to both breakpoints",
            "type": "integer"
        },
        "validate.min_mapping_quality": {
            "default": 5,
            "description": "The minimum mapping quality of reads to be used as evidence",
            "type": "integer"
        },
        "validate.min_non_target_aligned_split_reads": {
            "default": 1,
            "description": "The minimum number of split reads aligned to a breakpoint by the input bam and no forced by local alignment to the target region to call a breakpoint by split read evidence",
            "type": "integer"
        },
        "validate.min_sample_size_to_apply_percentage": {
            "default": 10,
            "description": "Minimum number of aligned bases to compute a match percent. if there are less than this number of aligned bases (match or mismatch) the percent comparator is not used",
            "type": "integer"
        },
        "validate.min_softclipping": {
            "default": 6,
            "description": "Minimum number of soft-clipped bases required for a read to be used as soft-clipped evidence",
            "type": "integer"
        },
        "validate.min_spanning_reads_resolution": {
            "default": 5,
            "description": "Minimum number of spanning reads required to call an event by spanning evidence",
            "type": "integer"
        },
        "validate.min_splits_reads_resolution": {
            "default": 3,
            "description": "Minimum number of split reads required to call a breakpoint by split reads",
            "type": "integer"
        },
        "validate.outer_window_min_event_size": {
            "default": 125,
            "description": "The minimum size of an event in order for flanking read evidence to be collected",
            "type": "integer"
        },
        "validate.stdev_count_abnormal": {
            "default": 3,
            "description": "The number of standard deviations away from the normal considered expected and therefore not qualifying as flanking reads",
            "type": "number"
        },
        "validate.trans_fetch_reads_limit": {
            "default": 12000,
            "description": "Related to [fetch_reads_limit](#fetch_reads_limit). overrides fetch_reads_limit for transcriptome libraries when set. if this has a value of none then fetch_reads_limit will be used for transcriptome libraries instead",
            "type": [
                "integer",
                "null"
            ]
        },
        "validate.trans_min_mapping_quality": {
            "default": 0,
            "description": "Related to [min_mapping_quality](#min_mapping_quality). overrides the min_mapping_quality if the library is a transcriptome and this is set to any number not none. if this value is none, min_mapping_quality is used for transcriptomes aswell as genomes",
            "type": [
                "integer",
                "null"
            ]
        },
        "validate.write_evidence_files": {
            "default": true,
            "description": "Write the intermediate bam and bed files containing the raw evidence collected and contigs aligned. not required for subsequent steps but can be useful in debugging and deep investigation of events",
            "type": "boolean"
        }
    },
    "anyOf": [
        {
            "not": {
                "properties": {
                    "skip_stage.validate": {
                        "const": true
                    }
                },
                "required": [
                    "reference.aligner_reference"
                ]
            }
        }
    ],
    "type": "object"
}
